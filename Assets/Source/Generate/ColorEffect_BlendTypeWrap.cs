//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ColorEffect_BlendTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(ColorEffect.BlendType));
		L.RegVar("Normal", get_Normal, null);
		L.RegVar("None", get_None, null);
		L.RegVar("Add", get_Add, null);
		L.RegVar("Multiply", get_Multiply, null);
		L.RegVar("Screen", get_Screen, null);
		L.RegVar("Erase", get_Erase, null);
		L.RegVar("Mask", get_Mask, null);
		L.RegVar("Below", get_Below, null);
		L.RegVar("Custom", get_Custom, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Add(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Add);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Multiply(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Multiply);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Screen(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Screen);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Erase(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Erase);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mask(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Mask);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Below(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Below);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Custom(IntPtr L)
	{
		ToLua.Push(L, ColorEffect.BlendType.Custom);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		ColorEffect.BlendType o = (ColorEffect.BlendType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

